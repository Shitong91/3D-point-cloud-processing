1. 惯例说明 

这里3DTK的旋转正方向和之前得到的结论不同，所以说这应该是认为定义的
特殊情况，故这里进行特殊说明。

旋转正方向：
往旋转轴的正方向望去，顺时针方向为正。

旋转顺序：

X Y Z

2. 旋转矩阵-欧拉角

void Matrix4ToEuler( double *alignxf,
                                  double *rPosTheta,
                                  double *rPos = 0)
{
  
  double _trX, _trY;

  // Calculate Y-axis angle 
  if(alignxf[0] > 0.0) {                      //不明白这里为什么判断alignxf[0]的正负，不应该判断alignxf[8]吗，是写错了吗？
    rPosTheta[1] = asin(alignxf[8]);
  } else {
    rPosTheta[1] = M_PI  - asin(alignxf[8]);
  }

  double  C    =  cos( rPosTheta[1] );
  if ( fabs( C ) > 0.005 )  {                 // Gimbal lock? 
    _trX      =  alignxf[10] / C;             // No, so get X-axis angle 
    _trY      =  -alignxf[9] / C;
    rPosTheta[0]  = atan2( _trY, _trX );
    _trX      =  alignxf[0] / C;              // Get Z-axis angle 
    _trY      = -alignxf[4] / C;
    rPosTheta[2]  = atan2( _trY, _trX );
  } else {                                    // Gimbal lock has occurred 
    rPosTheta[0] = 0.0;                       // Set X-axis angle to zero 
    _trX      =  alignxf[5];  //1                // And calculate Z-axis angle 
    _trY      =  alignxf[1];  //2
    rPosTheta[2]  = atan2( _trY, _trX );
  }
  
  rPosTheta[0] = deg(rPosTheta[0]);
  rPosTheta[1] = deg(rPosTheta[1]);
  rPosTheta[2] = deg(rPosTheta[2]);
 if (rPos != 0) {
    rPos[0] = alignxf[12];
    rPos[1] = alignxf[13];
    rPos[2] = alignxf[14];
      
  }
}

3. 2. 欧拉角-旋转矩阵

inline void EulerToMatrix4(const double *rPos,
                           const double *rPosTheta,
                           double *alignxf)
{
  double sx = sin(rPosTheta[0]);
  double cx = cos(rPosTheta[0]);
  double sy = sin(rPosTheta[1]);
  double cy = cos(rPosTheta[1]);
  double sz = sin(rPosTheta[2]);
  double cz = cos(rPosTheta[2]);

  alignxf[0]  = cy*cz;
  alignxf[1]  = sx*sy*cz + cx*sz;
  alignxf[2]  = -cx*sy*cz + sx*sz;
  alignxf[3]  = 0.0;
  alignxf[4]  = -cy*sz;
  alignxf[5]  = -sx*sy*sz + cx*cz;
  alignxf[6]  = cx*sy*sz + sx*cz;
  alignxf[7]  = 0.0;
  alignxf[8]  = sy;
  alignxf[9]  = -sx*cy;
  alignxf[10] = cx*cy;
  
  alignxf[11] = 0.0;

  alignxf[12] = rPos[0];
  alignxf[13] = rPos[1];
  alignxf[14] = rPos[2];
  alignxf[15] = 1;
}



